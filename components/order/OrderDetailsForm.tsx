"use client"

import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { CreditCard, Info } from "lucide-react"
import type { Order, User } from "@/lib/types"
import { useEffect, useRef } from "react"
import { useSelector } from "react-redux"
import type { RootState } from "@/lib/store"
import { Card, CardContent } from "@/components/ui/card"

const orderDetailsSchema = z.object({
    customerId: z.string().min(1, "Customer ID is required"),
    status: z.enum(["PENDING", "PROCESSING", "SHIPPED", "DELIVERED", "CANCELLED"]),
    paid: z.boolean(),
})

type OrderDetailsFormValues = z.infer<typeof orderDetailsSchema>

interface OrderDetailsFormProps {
    order: Order
    onStatusChange: (status: Order["status"]) => void
    onCustomerIdChange: (customerId: string) => void
    onPaymentProcess: () => void
    onPaidChange: (paid: boolean) => void
}

export function OrderDetailsForm({
    order,
    onStatusChange,
    onCustomerIdChange,
    onPaymentProcess,
    onPaidChange,
}: OrderDetailsFormProps) {
    const user = useSelector((state: RootState) => state.auth?.user) as User
    const initializedRef = useRef(false)

    const {
        register,
        formState: { errors },
        watch,
        setValue,
    } = useForm<OrderDetailsFormValues>({
        resolver: zodResolver(orderDetailsSchema),
        defaultValues: {
            customerId: user?.id || order.customerId || "",
            status: order.status,
            paid: order.paid,
        },
    })

    const watchStatus = watch("status")
    const watchPaid = watch("paid")

    // Initialize customer ID once on mount
    useEffect(() => {
        if (!initializedRef.current && user?.id) {
            setValue("customerId", user.id)
            onCustomerIdChange(user.id)
            initializedRef.current = true
        }
    }, [user, setValue, onCustomerIdChange])

    // Update paid status only when order.paid changes from props
    useEffect(() => {
        setValue("paid", order.paid)
    }, [order.paid, setValue])

    // Handle status change
    useEffect(() => {
        // Only trigger the callback when status actually changes
        if (watchStatus !== order.status) {
            onStatusChange(watchStatus)
        }
    }, [watchStatus, onStatusChange, order.status])

    // Handle paid change
    useEffect(() => {
        // Only trigger the callback when paid status actually changes
        if (watchPaid !== order.paid) {
            onPaidChange(watchPaid)
        }
    }, [watchPaid, onPaidChange, order.paid])

    return (
        <div className="space-y-4">
            <Card className="bg-muted/40">
                <CardContent className="pt-4">
                    <div className="flex items-center gap-2 mb-2">
                        <Info className="h-4 w-4 text-muted-foreground" />
                        <span className="text-sm text-muted-foreground">
                            Order numbers are automatically generated by the system
                        </span>
                    </div>
                </CardContent>
            </Card>

            <div>
                <Label htmlFor="customerId">Customer ID</Label>
                <Input
                    id="customerId"
                    {...register("customerId")}
                    defaultValue={user?.id || order.customerId || ""}
                    readOnly={!!user?.id}
                    className={user?.id ? "bg-muted" : ""}
                />
                {errors.customerId && <p className="text-sm text-red-500">{errors.customerId.message}</p>}
            </div>

            <div>
                <Label htmlFor="status">Status</Label>
                <Select
                    onValueChange={(value) => {
                        setValue("status", value as Order["status"])
                    }}
                    value={watchStatus}
                >
                    <SelectTrigger>
                        <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                        <SelectItem value="PENDING">Pending</SelectItem>
                        <SelectItem value="PROCESSING">Processing</SelectItem>
                        <SelectItem value="SHIPPED">Shipped</SelectItem>
                        <SelectItem value="DELIVERED">Delivered</SelectItem>
                        <SelectItem value="CANCELLED">Cancelled</SelectItem>
                    </SelectContent>
                </Select>
            </div>

            <div className="flex items-center justify-between">
                <div className="space-x-2">
                    <Label htmlFor="paid">Payment Status</Label>
                    <Badge variant={watchPaid ? "success" : "destructive"}>{watchPaid ? "Paid" : "Unpaid"}</Badge>
                </div>
                {!watchPaid && (
                    <Button type="button" onClick={onPaymentProcess} size="sm">
                        <CreditCard className="mr-2 h-4 w-4" />
                        Process Payment
                    </Button>
                )}
            </div>
        </div>
    )
}

